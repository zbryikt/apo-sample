// Generated by LiveScript 1.3.1
var plotdb;
plotdb = {};
import$(plotdb, {
  Number: {
    name: 'Number',
    test: function(it){
      return !isNaN(+it);
    },
    level: 3,
    parse: function(it){
      return parseFloat(it);
    }
  },
  String: {
    name: 'String',
    test: function(){
      return true;
    },
    level: 1,
    parse: function(it){
      return it;
    }
  },
  Date: {
    name: 'Date',
    level: 2,
    match: {
      type1: /^(\d{4})[/-](\d{1,2})[/-]\d{1,2} ((\d{1,2}):(\d{1,2})(:(\d{1,2}))?)?/,
      type2: /^(\d{1,2})[/-](\d{1,2})[/-]\d{4} ((\d{1,2}):(\d{1,2})(:(\d{1,2}))?)?/,
      type3: /^(\d{4})[/-](\d{1,2})$/,
      type4: /^(\d{1,2})[/-](\d{4})$/
    },
    test: function(it){
      var d, matched, k, v;
      d = new Date(it);
      if (!(d instanceof Date) || isNaN(d.getTime())) {
        matched = (function(){
          var ref$, results$ = [];
          for (k in ref$ = this.match) {
            v = ref$[k];
            results$.push(v.exec(it));
          }
          return results$;
        }.call(this)).filter(function(it){
          return it;
        })[0];
        if (!matched) {
          return false;
        }
      }
      return true;
    },
    parse: function(it){
      var d, matched, k, v;
      d = new Date(it);
      if (!(d instanceof Date) || isNaN(d.getTime())) {
        matched = (function(){
          var ref$, results$ = [];
          for (k in ref$ = this.match) {
            v = ref$[k];
            results$.push(v.exec(it));
          }
          return results$;
        }.call(this)).filter(function(it){
          return it;
        })[0];
        if (!matched) {
          return null;
        }
        return null;
      }
      return d;
    }
  },
  Choice: function(v){
    return {
      name: 'Choice',
      level: 4,
      test: function(it){
        return v && v.length && in$(it, v);
      },
      values: v
    };
  },
  Percent: {
    name: 'Percent',
    level: 3,
    test: function(it){
      return !!/[0-9.]+%/.exec(it);
    }
  },
  Color: {
    name: 'Color',
    level: 4,
    test: function(it){
      return !/(rgba?|hsla?)\([0-9.,]+\)|#[0-9a-f]{3,6}|[a-z0-9]+/.exec(it.trim());
    },
    'default': '#dc4521',
    Gray: '#cccccc',
    Positive: '#4c4',
    Negative: '#c44',
    subtype: {
      negative: "negative",
      positive: "positive"
    }
  },
  Palette: {
    name: 'Palette',
    level: 5,
    re: /^((rgb|hsl)\((\s*[0-9.]+\s*,){2}\s*[0-9.]+\s*\)|(rgb|hsl)a\((\s*[0-9.]+\s*,){3}\s*[0-9.]+\s*\)|\#[0-9a-f]{3}|\#[0-9a-f]{6}|[a-zA-Z][a-zA-Z0-9]*)$/,
    test: function(it){
      var e, this$ = this;
      if (!it) {
        return true;
      }
      if (typeof it === typeof "") {
        if (it.charAt(0) !== '[') {
          it = it.split(',');
        } else {
          try {
            it = JSON.parse(it);
          } catch (e$) {
            e = e$;
            return false;
          }
        }
      } else if (Array.isArray(it)) {
        return !it.filter(function(it){
          return !this$.re.exec(it.trim());
        }).length ? true : false;
      } else if (typeof it === 'object') {
        if (!(it.colors != null)) {
          return true;
        }
        if (it.colors.filter(function(it){
          return !it.hex;
        }).length) {
          return true;
        }
      }
      return false;
    },
    parse: function(it){
      var e;
      if (!it) {
        return it;
      }
      if (Array.isArray(it)) {
        return it;
      }
      if (typeof it === typeof "") {
        try {
          return JSON.parse(it);
        } catch (e$) {
          e = e$;
          return it.split(',').map(function(it){
            return {
              hex: it.trim()
            };
          });
        }
      }
      return it;
    },
    'default': {
      colors: ['#1d3263', '#226c87', '#f8d672', '#e48e11', '#e03215', '#ab2321'].map(function(it){
        return {
          hex: it
        };
      })
    },
    plotdb: {
      colors: ['#ed1d78', '#c59b6d', '#8cc63f', '#28aae2'].map(function(it){
        return {
          hex: it
        };
      })
    },
    qualitative: {
      colors: ['#c05ae0', '#cf2d0c', '#e9ab1e', '#86ffb5', '#64dfff', '#003f7d'].map(function(it){
        return {
          hex: it
        };
      })
    },
    binary: {
      colors: ['#ff8356', '#0076a1'].map(function(it){
        return {
          hex: it
        };
      })
    },
    sequential: {
      colors: ['#950431', '#be043e', '#ec326d', '#fc82a9', '#febed2', '#fee6ee'].map(function(it){
        return {
          hex: it
        };
      })
    },
    diverging: {
      colors: ['#74001a', '#cd2149', '#f23971', '#ff84ab', '#ffc3d7', '#f2f2dd', '#b8d9ed', '#81b1d0', '#3d8bb7', '#0071a8', '#003558'].map(function(it){
        return {
          hex: it
        };
      })
    },
    subtype: {
      qualitative: "qualitative",
      binary: "binary",
      sequential: "sequential",
      diverging: "diverging"
    },
    scale: {
      ordinal: function(pal){
        var c, range, domain;
        c = pal.colors;
        range = c.filter(function(it){
          return it.keyword;
        }).map(function(it){
          return it.hex;
        }).concat(c.filter(function(it){
          return !it.keyword;
        }).map(function(it){
          return it.hex;
        }));
        domain = c.map(function(it){
          return it.keyword;
        }).filter(function(it){
          return it;
        });
        return d3.scale.ordinal().domain(domain).range(range);
      },
      linear: function(pal, domain){
        var c, range;
        c = pal.colors;
        range = c.filter(function(it){
          return it.keyword;
        }).map(function(it){
          return it.hex;
        }).concat(c.filter(function(it){
          return !it.keyword;
        }).map(function(it){
          return it.hex;
        }));
        if (!domain) {
          domain = c.map(function(it){
            return it.keyword;
          }).filter(function(it){
            return it != null;
          });
        }
        return d3.scale.linear().domain(domain).range(range);
      }
    }
  },
  Boolean: {
    name: 'Boolean',
    level: 2,
    test: function(it){
      return !!/^(true|false|1|0|yes|no)$/.exec(it);
    },
    parse: function(it){
      if (it && typeof it === typeof "") {
        if (/^(yes|true)$/.exec(it.trim())) {
          return true;
        }
        if (/\d+/.exec(it.trim()) && it.trim() !== "0") {
          return true;
        }
        return false;
      }
      if (it) {
        return true;
      }
      return false;
    }
  }
});
plotdb.chart = {
  corelib: {},
  create: function(config){
    return import$(import$({}, this.base), config);
  },
  base: {
    dimension: {
      value: {
        type: [],
        require: false
      }
    },
    config: {
      padding: {
        type: [plotdb.Number],
        'default': 10
      }
    },
    init: function(root, data, config){},
    bind: function(root, data, config){},
    resize: function(root, data, config){},
    render: function(root, data, config){}
  },
  dataFromDimension: function(dimension){
    var data, len, k, v, i$, i, ret, that;
    data = [];
    len = Math.max.apply(null, (function(){
      var ref$, results$ = [];
      for (k in ref$ = dimension) {
        v = ref$[k];
        results$.push(v);
      }
      return results$;
    }()).reduce(function(a, b){
      return a.concat(b.fields || []);
    }, []).filter(function(it){
      return it.data;
    }).map(function(it){
      return it.data.length;
    }).concat([0]));
    for (i$ = 0; i$ < len; ++i$) {
      i = i$;
      ret = {};
      for (k in dimension) {
        v = dimension[k];
        if (v.multiple) {
          ret[k] = (v.fields || (v.fields = [])).length
            ? (v.fields || (v.fields = [])).map(fn$)
            : [];
          v.fieldName = (v.fields || (v.fields = [])).map(fn1$);
        } else {
          ret[k] = (that = (v.fields || (v.fields = []))[0]) ? (that.data || (that.data = []))[i] : null;
          v.fieldName = (that = (v.fields || (v.fields = []))[0]) ? that.name : null;
        }
        if ((v.type || []).filter(fn2$).length) {
          if (Array.isArray(ret[k])) {
            ret[k] = ret[k].map(fn3$);
          } else {
            ret[k] = parseFloat(ret[k]);
          }
        }
      }
      data.push(ret);
    }
    return data;
    function fn$(it){
      return (it.data || (it.data = []))[i];
    }
    function fn1$(it){
      return it.name;
    }
    function fn2$(it){
      return it.name === 'Number';
    }
    function fn3$(it){
      return parseFloat(it);
    }
  },
  dataFromHash: function(dimension, source){
    var k, v;
    if (!dimension || !source) {
      return [];
    }
    if (Array.isArray(source)) {
      return source;
    }
    if (typeof source === 'function') {
      source = source();
    }
    for (k in dimension) {
      v = dimension[k];
      if (source[k]) {
        v.fields = source[k];
      }
    }
    return plotdb.chart.dataFromDimension(dimension);
  },
  getSampleData: function(chart, dimension){
    dimension == null && (dimension = null);
    return plotdb.chart.dataFromHash(dimension || chart.dimension, chart.sample);
  },
  updateData: function(chart){
    return chart.data = plotdb.chart.dataFromDimension(chart.dimension);
  },
  updateAssets: function(chart, assets){
    var ret, i$, len$, file, raw, array, j$, to$, idx;
    assets == null && (assets = []);
    ret = {};
    for (i$ = 0, len$ = assets.length; i$ < len$; ++i$) {
      file = assets[i$];
      raw = atob(file.content);
      array = new Uint8Array(raw.length);
      for (j$ = 0, to$ = raw.length; j$ < to$; ++j$) {
        idx = j$;
        array[idx] = raw.charCodeAt(idx);
      }
      file.blob = new Blob([array], {
        type: file.type
      });
      file.url = URL.createObjectURL(file.blob);
      file.datauri = ["data:", file.type, ";charset=utf-8;base64,", file.content].join("");
      ret[file.name] = file;
    }
    return chart.assets = ret;
  },
  updateConfig: function(chart, config){
    var k, ref$, v, type, results$ = [];
    for (k in ref$ = chart.config) {
      v = ref$[k];
      type = (config[k].type || []).map(fn$);
      if (!(config[k] != null)) {
        config[k] = v['default'];
      } else if (!(config[k].value != null)) {
        config[k] = (v || config[k])['default'];
      } else {
        config[k] = config[k].value;
      }
      if (type.filter(fn1$).length) {
        results$.push(config[k] = parseFloat(config[k]));
      }
    }
    return results$;
    function fn$(it){
      return it.name;
    }
    function fn1$(it){
      return it === 'Number';
    }
  }
};
plotdb.theme = {
  create: function(config){
    return import$(import$({}, this.base), config);
  },
  base: {
    palette: {
      'default': [],
      diverging: [],
      sequential: [],
      binary: [],
      qualitative: [],
      binaryDiverge: [],
      sequentialQualitative: [],
      sequentialSequential: [],
      divergingDiverging: []
    },
    config: {
      padding: {
        type: [plotdb.Number],
        'default': 10
      }
    }
  }
};
plotdb.d3 = {};
plotdb.d3.axis = {
  overlap: function(axisGroup, axis, fontSize){
    var range, selection, minWidth, maxWidth, overlap;
    range = axis.scale().range();
    selection = axisGroup.selectAll(".tick text");
    if (!selection[0].length) {
      return;
    }
    minWidth = (range[1] - range[0]) / selection.length;
    maxWidth = d3.max(selection[0].map(function(d){
      return d.getBBox().width;
    }));
    overlap = maxWidth / minWidth;
    if (fontSize && overlap < 2) {
      selection.attr({
        transform: function(d, i){
          return ["translate(0,", overlap > 1 && i % 2 ? fontSize : 0, ")"].join(" ");
        }
      });
      return axisGroup.selectAll(".tick").style({
        opacity: 1
      });
    } else {
      selection.attr({
        transform: ""
      });
      return axisGroup.selectAll(".tick").style({
        opacity: function(d, i){
          if (i % parseInt(overlap + 1)) {
            return 0;
          } else {
            return 1;
          }
        }
      });
    }
  }
};
plotdb.d3.popup = function(root, sel, cb){
  var popup, x$;
  popup = root.querySelector('.pdb-popup');
  if (!popup) {
    popup = d3.select(root).append('div').attr({
      'class': 'pdb-popup float'
    });
    popup.each(function(d, i){
      var x$;
      x$ = d3.select(this);
      x$.append('div').attr({
        'class': 'title'
      });
      x$.append('div').attr({
        'class': 'value'
      });
      return x$;
    });
  } else {
    popup = d3.select(popup);
  }
  x$ = sel;
  x$.on('mousemove', function(d, i){
    var ref$, x, y, pbox, rbox;
    ref$ = [d3.event.clientX, d3.event.clientY], x = ref$[0], y = ref$[1];
    cb.call(this, d, i, popup);
    popup.style({
      display: 'block'
    });
    pbox = popup[0][0].getBoundingClientRect();
    rbox = root.getBoundingClientRect();
    x = x - pbox.width / 2;
    y = y + 20;
    if (y > rbox.top + rbox.height - pbox.height - 50) {
      y = y - pbox.height - 40;
    }
    if (x < 10) {
      x = 10;
    }
    if (x > rbox.left + rbox.width - pbox.width - 10) {
      x = rbox.left + rbox.width - pbox.width - 10;
    }
    return popup.style({
      top: y + "px",
      left: x + "px"
    });
  });
  x$.on('mouseout', function(){
    if (sel.hidePopup) {
      clearTimeout(sel.hidePopup);
    }
    return sel.hidePopup = setTimeout(function(){
      return popup.style({
        display: 'none'
      });
    }, 1000);
  });
  return x$;
};
plotdb.data = {
  sample: {
    category: ['IT', 'RD', 'GM', 'FIN', 'LEGAL', 'HR', 'SALES', 'BD'],
    name: ['James', 'Joe', 'Amelie', 'Doraemon', 'Cindy', 'David', 'Frank', 'Kim', 'Ken', 'Leland', 'Mike', 'Nick', 'Oliver', 'Randy'],
    fruit: ['Apple', 'Orange', 'Banana', 'Grape', 'Longan', 'Litchi', 'Peach', 'Guava', 'Melon', 'Pineapple', 'Pomelo', 'Durian', 'Berry', 'Pear'],
    generate: function(dimension){
      var ret, res$, i$, to$, i, node, k, v;
      res$ = [];
      for (i$ = 0, to$ = parseInt(Math.random() * 10 + 10); i$ < to$; ++i$) {
        i = i$;
        node = {};
        for (k in dimension) {
          v = dimension[k];
          if (!v.type || !v.type.length) {
            node[k] = this.name[parseInt(Math.random() * this.name.length)];
          } else {
            node[k] = parseInt(Math.random() * 8) + 2;
          }
        }
        res$.push(node);
      }
      ret = res$;
      return ret;
    }
  }
};
plotdb.rand = function(){
  return this[parseInt(Math.random() * this.length)];
};
plotdb.data.sample.name.rand = plotdb.rand;
plotdb.data.sample.category.rand = plotdb.rand;
plotdb.data.sample.fruit.rand = plotdb.rand;
import$(plotdb.data.sample, {
  crimeanWar: {
    "month": {
      "name": "month",
      "data": ["01/04/1854", "01/05/1854", "01/06/1854", "01/07/1854", "01/08/1854", "01/09/1854", "01/10/1854", "01/11/1854", "01/12/1854", "01/01/1855", "01/02/1855", "01/03/1855", "01/04/1855", "01/05/1855", "01/06/1855", "01/07/1855", "01/08/1855", "01/09/1855", "01/10/1855", "01/11/1855", "01/12/1855", "01/01/1856", "01/02/1856", "01/03/1856"]
    },
    "army size": {
      "name": "army size",
      "data": [8571, 23333, 28333, 28722, 30246, 30290, 30643, 29736, 32779, 32393, 30919, 30107, 32252, 35473, 38863, 42647, 44614, 47751, 46852, 37853, 43217, 44212, 43485, 46140]
    },
    "death number by zymotic": {
      "name": "death number by zymotic",
      "data": [1, 12, 11, 359, 828, 788, 503, 844, 1725, 2761, 2120, 1205, 477, 508, 802, 382, 483, 189, 128, 178, 91, 42, 24, 15]
    },
    "death number by wound": {
      "name": "death number by wound",
      "data": [0, 0, 0, 0, 1, 81, 132, 287, 114, 83, 42, 32, 48, 49, 209, 134, 164, 276, 53, 33, 18, 2, 0, 0]
    },
    "death number by other": {
      "name": "death number by other",
      "data": [5, 9, 6, 23, 30, 70, 128, 106, 131, 324, 361, 172, 57, 37, 31, 33, 25, 20, 18, 32, 28, 48, 19, 35]
    },
    "zymotic rate(‰)": {
      "name": "zymotic rate(‰)",
      "data": [1.4, 6.2, 4.7, 150, 328.5, 312.2, 197, 340.6, 631.5, 1022.8, 822.8, 480.3, 177.5, 171.8, 247.6, 107.5, 129.9, 47.5, 32.8, 56.4, 25.3, 11.4, 6.6, 3.9]
    },
    "wound rate(‰)": {
      "name": "wound rate(‰)",
      "data": [0, 0, 0, 0, 0.4, 32.1, 51.7, 115.8, 41.7, 30.7, 16.3, 12.8, 17.9, 16.6, 64.5, 37.7, 44.1, 69.4, 13.6, 10.5, 5, 0.5, 0, 0]
    },
    "other rate(‰)": {
      "name": "other rate(‰)",
      "data": [7, 4.6, 2.5, 9.6, 11.9, 27.7, 50.1, 42.8, 48, 120, 140.1, 68.6, 21.2, 12.5, 9.6, 9.3, 6.7, 5, 4.6, 10.1, 7.8, 13, 5.2, 9.1]
    }
  },
  lifeExpectancy: {
    "1985": {
      "name": "1985",
      "data": ["42.8", "72.2", "67.7", "80", "50", "73.1", "71.9", "70.5", "75.7", "74", "66.2", "67.2", "71.5", "55.8", "73.3", "71.1", "74.6", "71.1", "55", "56", "59.8", "71.5", "67.5", "67.4", "72.9", "71.3", "52", "49.8", "56.3", "58.2", "76.5", "67.2", "49.1", "53.4", "71.8", "66.4", "70.3", "55.4", "52.9", "56.6", "76.3", "57.7", "71.6", "74.3", "76.7", "71.1", "74.7", "60.6", "73.1", "70.5", "70", "61.1", "67.8", "51.9", "50.2", "70.4", "46.3", "64.1", "74.7", "75.7", "60.6", "56.6", "70.2", "74.6", "58.7", "76", "69.1", "62.8", "50.7", "50.5", "65", "53.4", "67.6", "68.9", "77.6", "55.9", "63.4", "63.6", "68.5", "73.7", "74.9", "75.7", "72.6", "77.8", "69.3", "66.4", "63.1", "56.4", "65.9", "69.5", "74.6", "64.7", "54.3", "70.1", "65.3", "60.4", "54.5", "71.9", "71.2", "73.8", "72", "54.5", "50.8", "70.5", "62.7", "46.9", "75.2", "64", "58.9", "67.8", "69.7", "61.8", "66", "60.8", "73.1", "66.1", "47", "56.7", "61.4", "55.2", "76.4", "74.2", "64.9", "45", "55.5", "76.1", "68.4", "61.1", "75.1", "56", "73.1", "67.2", "66", "70.7", "73.1", "75", "69.7", "68.2", "50.3", "69.5", "69.3", "67.5", "62.5", "71.8", "55.8", "72.6", "69.9", "49.5", "73.1", "70.8", "71.8", "60.2", "52.8", "62.8", "76.6", "70.5", "54.9", "68.5", "60", "76.9", "76.9", "68.5", "73", "64.4", "57.9", "70.4", "55.8", "57.5", "68", "68.5", "69.8", "65.2", "62", "52.3", "70", "71.9", "74.7", "74.8", "72.1", "67", "62.3", "72.2", "69.1", "67.4", "57.8", "56.9", "63.5", "51.1"]
    },
    "2000": {
      "name": "2000",
      "data": ["51", "74.2", "73.2", "82.7", "52.6", "73.9", "74.3", "71.4", "79.7", "78.2", "68", "70.3", "73.6", "65.8", "74.3", "68.2", "77.8", "69", "59.2", "63.9", "67.6", "75.2", "51.6", "71.9", "75.5", "71.7", "53.3", "47.5", "60.9", "55", "79.3", "70.1", "46.7", "52.4", "77.2", "71.5", "72.5", "60.2", "52.5", "52.6", "77.7", "52.8", "74.7", "75.9", "79.1", "75", "76.9", "59.6", "73.3", "72.7", "73.2", "68.9", "72.9", "52.4", "49.3", "70.1", "52.5", "64.2", "77.8", "79.1", "58", "60", "72.3", "78.1", "60.2", "78", "70.5", "68.5", "55.6", "51.7", "64.4", "58.6", "68.8", "71.8", "79.9", "61.1", "68.3", "71.2", "69.1", "76.7", "78.8", "79.6", "72.7", "81.1", "73.1", "63.6", "57.4", "59.5", "63.2", "76.3", "77.5", "65.8", "59.5", "70.1", "76.2", "49.8", "55.9", "74.6", "72", "78.2", "73.9", "60.5", "46.3", "73.8", "72.6", "51.1", "79.7", "63.8", "61.8", "71", "75.1", "64.5", "69.3", "61.4", "72", "71.3", "53.6", "61.4", "55", "64.9", "78.1", "78.5", "73.9", "53", "55.8", "78.7", "73.7", "62.6", "76.9", "56.9", "74.1", "74.3", "69", "73.8", "76.7", "77.2", "70.8", "65.4", "50", "72", "69.8", "69.9", "65.3", "76.1", "60", "74.7", "70.9", "52.2", "78.6", "73.3", "75.8", "61.7", "54.3", "57.1", "79.3", "72.4", "64.4", "68.8", "48.7", "79.7", "80", "73.8", "76", "66.3", "54.8", "71.3", "63.6", "59", "69.1", "69.4", "75", "71.5", "63.1", "50", "67.5", "73.8", "77.8", "77.1", "74.6", "67.4", "63", "74.3", "73.5", "72.6", "63.5", "45.7", "50.8", "54.1"]
    },
    "2015": {
      "name": "2015",
      "data": ["57.63", "76", "76.5", "84.1", "61", "75.2", "76.2", "74.4", "81.8", "81", "72.9", "72.3", "79.2", "70.1", "75.8", "70.4", "80.4", "70", "65.5", "70.2", "72.3", "77.9", "66.4", "75.6", "78.7", "74.9", "62.8", "60.4", "68.4", "59.5", "81.7", "74.6", "53.8", "57.7", "79.3", "76.9", "75.8", "64.1", "58.3", "61.9", "80", "60.33", "78", "78.5", "82.6", "78.6", "80.1", "64.63", "74.6", "73.8", "75.2", "71.3", "74.1", "60.63", "62.9", "76.8", "63.6", "66.3", "80.8", "81.9", "60.53", "65.1", "73.3", "81.1", "65.5", "79.8", "71.7", "73.1", "60.8", "53.4", "64.4", "65.3", "72.4", "76.2", "82.8", "66.8", "70.9", "78.5", "72.1", "80.4", "82.4", "82.1", "75.5", "83.5", "78.3", "68.2", "66.63", "62.4", "71.4", "80.7", "80.7", "69", "66.4", "75.7", "78.5", "48.5", "63.9", "76.2", "75.4", "81.1", "77", "64.7", "60.22", "75.1", "79.5", "57.6", "82.1", "65.1", "65.7", "73.9", "74.5", "67", "72.7", "65.3", "75.8", "74.7", "56.4", "67.9", "61", "71.2", "80.6", "80.6", "76.8", "62.2", "61.33", "81.6", "75.7", "66.5", "78.2", "60.6", "73.9", "77.5", "70.2", "77.3", "79.8", "82", "76.8", "73.13", "66.53", "74.5", "72.9", "72.2", "68.8", "78.1", "66.1", "78.1", "73.7", "58.5", "82.1", "76.4", "80.2", "64.1", "58.7", "63.72", "81.7", "76.5", "69.5", "70.5", "51.5", "82", "82.9", "70.26", "79.7", "71", "63.43", "75.1", "72.4", "64.23", "70.5", "71.4", "77.3", "76.5", "67.9", "60.8", "72.1", "76.6", "81.4", "79.1", "77.3", "70.1", "65", "75.8", "75.2", "76.5", "67.6", "58.96", "60.01", "58"]
    },
    "Country": {
      "name": "Country",
      "data": ["Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "Antigua and Barbuda", "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Central African Republic", "Chad", "Chile", "China", "Colombia", "Comoros", "Congo, Dem. Rep.", "Congo, Rep.", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "North Korea", "South Korea", "Kuwait", "Kyrgyz Republic", "Lao", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Lithuania", "Luxembourg", "Macedonia, FYR", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Mauritania", "Mauritius", "Mexico", "Micronesia, Fed. Sts.", "Moldova", "Mongolia", "Montenegro", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nepal", "Netherlands", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Norway", "Oman", "Pakistan", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "St. Lucia", "St. Vincent and the Grenadines", "Samoa", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovak Republic", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "Spain", "Sri Lanka", "Sudan", "Suriname", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "West Bank and Gaza", "Vietnam", "Yemen", "Zambia", "Zimbabwe", "South Sudan"]
    },
    "Continent": {
      "name": "Continent",
      "data": ["Asia", "Europe", "Africa", "Europe", "Africa", "North America", "South America", "Europe", "Oceania", "Europe", "Europe", "North America", "Asia", "Asia", "North America", "Europe", "Europe", "North America", "Africa", "Asia", "South America", "Europe", "Africa", "South America", "Asia", "Europe", "Africa", "Africa", "Asia", "Africa", "North America", "Africa", "Africa", "Africa", "South America", "Asia", "South America", "Africa", "Africa", "Africa", "North America", "Africa", "Europe", "North America", "Europe", "Europe", "Europe", "Africa", "North America", "North America", "South America", "Africa", "North America", "Africa", "Africa", "Europe", "Africa", "Oceania", "Europe", "Europe", "Africa", "Africa", "Europe", "Europe", "Africa", "Europe", "North America", "North America", "Africa", "Africa", "South America", "North America", "North America", "Europe", "Europe", "Asia", "Asia", "Asia", "Asia", "Europe", "Asia", "Europe", "North America", "Asia", "Asia", "Asia", "Africa", "Oceania", "Asia", "Asia", "Asia", "Asia", "Asia", "Europe", "Asia", "Africa", "Africa", "Africa", "Europe", "Europe", "Europe", "Africa", "Africa", "Asia", "Asia", "Africa", "Europe", "Oceania", "Africa", "Africa", "North America", "Oceania", "Europe", "Asia", "Europe", "Africa", "Africa", "Asia", "Africa", "Asia", "Europe", "Oceania", "North America", "Africa", "Africa", "Europe", "Asia", "Asia", "North America", "Oceania", "South America", "South America", "Asia", "Europe", "Europe", "Asia", "Europe", "Asia", "Africa", "North America", "North America", "Oceania", "Africa", "Asia", "Africa", "Europe", "Africa", "Africa", "Asia", "Europe", "Europe", "Oceania", "Africa", "Africa", "Europe", "Asia", "Africa", "South America", "Africa", "Europe", "Europe", "Asia", "Asia", "Asia", "Africa", "Asia", "Asia", "Africa", "Oceania", "North America", "Africa", "Asia", "Asia", "Africa", "Europe", "Asia", "Europe", "North America", "South America", "Asia", "Oceania", "South America", "Asia", "Asia", "Asia", "Africa", "Africa", "Africa"]
    }
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}// Generated by LiveScript 1.3.1
(function(){
  var config, x$, e;
  config = {
    domain: 'localhost',
    domainIO: 'localhost.io',
    urlschema: "http://",
    name: 'plotdb',
    debug: true,
    facebook: {
      clientID: '1546734828988373'
    },
    google: {
      clientID: '608695485854-bh8mqncpi8ofl1pprl940gti2cdbhgf8.apps.googleusercontent.com'
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = config;
  } else if (typeof angular != 'undefined' && angular !== null) {
    try {
      x$ = angular.module('plotDB');
      x$.service('plConfig', [].concat(function(){
        return config;
      }));
    } catch (e$) {
      e = e$;
    }
  }
  if (typeof window != 'undefined' && window !== null) {
    return window.plConfig = config;
  }
})();// Generated by LiveScript 1.3.1
plotdb.view = {
  host: plConfig.urlschema + "" + plConfig.domainIO,
  loader: function(key, cb){
    var req;
    req = new XMLHttpRequest();
    req.onload = function(){
      var e;
      try {
        return cb(new plotdb.view.chart(JSON.parse(this.responseText), {}));
      } catch (e$) {
        e = e$;
        console.error("load chart " + key + " failed when parsing response: ");
        return console.error(e);
      }
    };
    if (typeof key === 'number') {
      req.open('get', this.host + "/d/chart/" + key, true);
    } else if (typeof key === 'string') {
      req.open('get', key, true);
    }
    return req.send();
  },
  chart: function(chart, arg$){
    var ref$, theme, fields, root, data;
    ref$ = arg$ != null
      ? arg$
      : {}, theme = ref$.theme, fields = ref$.fields, root = ref$.root, data = ref$.data;
    this._ = {
      handler: {},
      _chart: JSON.stringify(chart),
      chart: chart,
      fields: fields,
      root: root,
      inited: false
    };
    if (chart) {
      this._.chart = chart = import$(eval(chart.code.content), chart);
    }
    plotdb.chart.updateConfig(chart, chart.config);
    plotdb.chart.updateAssets(chart, chart.assets);
    if (data) {
      this.data(data);
    }
    if (fields) {
      this.sync(fields);
    }
    if (!data && (fields == null || !fields.length)) {
      this.data(chart.sample);
    }
    if (theme != null) {
      this.theme(theme);
    }
    if (fields != null) {
      this.sync(fields);
    }
    if (root) {
      this.attach(root);
    }
    return this;
  }
};
import$(plotdb.view.chart.prototype, {
  update: function(){
    var this$ = this;
    return ['resize', 'bind', 'render'].map(function(it){
      if (this$._.chart[it]) {
        return this$._.chart[it]();
      }
    });
  },
  attach: function(root){
    var ref$, chart, theme, resize;
    this._.root = root;
    ref$ = {
      chart: (ref$ = this._).chart,
      theme: ref$.theme
    }, chart = ref$.chart, theme = ref$.theme;
    root.setAttribute("class", ((root.getAttribute("class") || "").split(" ").filter(function(it){
      return it !== 'pdb-root';
    }).concat(['pdb-root'])).join(" "));
    root.innerHTML = [chart && chart.style ? "<style type='text/css'>/* <![CDATA[ */" + chart.style.content + "/* ]]> */</style>" : void 8, theme && theme.style ? "<style type='text/css'>/* <![CDATA[ */" + theme.style.content + "/* ]]> */</style>" : void 8, "<div style='position:relative;width:100%;height:100%;'><div style='height:0;'>&nbsp;</div>", chart.doc.content, "</div>", theme && (theme.doc || (theme.doc = {})).content ? theme.doc.content : void 8].join("");
    chart.root = root.querySelector("div:first-of-type");
    resize = function(){
      var this$ = this;
      if (resize.handle) {
        clearTimeout(resize.handle);
      }
      return resize.handle = setTimeout(function(){
        resize.handle = null;
        chart.resize();
        return chart.render();
      }, 500);
    };
    window.addEventListener('resize', function(){
      return resize();
    });
    chart.init();
    if (chart.parse) {
      chart.parse();
    }
    chart.resize();
    chart.bind();
    chart.render();
    root.setAttribute('class', (root.getAttribute('class') || "").split(' ').filter(function(it){
      return it !== 'loading';
    }).join(" ").trim());
    return this.inited = true;
  },
  config: function(config){
    return import$(this._.chart.config, config);
  },
  init: function(root){
    return this._.chart.init();
  },
  parse: function(){
    return this._.chart.parse();
  },
  resize: function(){
    return this._.chart.resize();
  },
  bind: function(){
    return this._.chart.bind();
  },
  render: function(){
    return this._.chart.render();
  },
  clone: function(){
    var ref$;
    return new plotdb.view.chart(JSON.parse(this._._chart), {
      theme: (ref$ = this._).theme,
      fields: ref$.fields
    });
  },
  on: function(event, cb){
    var ref$;
    return ((ref$ = this._.handler)[event] || (ref$[event] = [])).push(cb);
  },
  theme: function(theme){
    return this._.theme = import$(eval(theme.code.content), theme);
  },
  data: function(data){
    if (data == null) {
      return this._.data;
    }
    this._.data = data;
    return this.sync();
  },
  sync: function(fields){
    var hash, k, ref$, v;
    fields == null && (fields = []);
    if (this._.data) {
      return this._.chart.data = plotdb.chart.dataFromHash(this._.chart.dimension, this._.data);
    }
    hash = d3.map(fields, function(it){
      return it.key;
    });
    for (k in ref$ = this._.chart.dimension) {
      v = ref$[k];
      v.fields = (v.fields || []).map(fn$).filter(fn1$);
    }
    plotdb.chart.updateData(this._.chart);
    if (this._.chart.parse) {
      return this._.chart.parse();
    }
    function fn$(it){
      return hash.get(it.key);
    }
    function fn1$(it){
      return it;
    }
  }
});
plotdb.load = function(key, cb){
  return plotdb.view.loader(key, cb);
};
plotdb.render = function(config, cb){
  return plotdb.view.render(config, cb);
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}